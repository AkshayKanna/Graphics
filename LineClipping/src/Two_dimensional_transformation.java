
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Siva
 */
public class Two_dimensional_transformation extends javax.swing.JFrame {

    /**
     * Creates new form Two_dimensional_transformation
     */
    private Graphics2D g2DResult;
    private Graphics2D g2DObject;
    private Graphics gResult;
    private Graphics gObject;
    private List<Point2D> outerRect = new ArrayList();
    private List<Point2D> innerRect1 = new ArrayList();
    private List<Point2D> innerRect2 = new ArrayList();
    private List<Point2D> innerRect3 = new ArrayList();
    private List<Point2D> smallRect1 = new ArrayList();
    private List<Point2D> smallRect2 = new ArrayList();
    private List<Point2D> smallRect3 = new ArrayList();
    private List<Point2D> routerRect = new ArrayList();
    private List<Point2D> rinnerRect1 = new ArrayList();
    private List<Point2D> rinnerRect2 = new ArrayList();
    private List<Point2D> rinnerRect3 = new ArrayList();
    private List<Point2D> rsmallRect1 = new ArrayList();
    private List<Point2D> rsmallRect2 = new ArrayList();
    private List<Point2D> rsmallRect3 = new ArrayList();
    private List<Shape> shapes = new ArrayList();
    public Two_dimensional_transformation() {
        initComponents();
        gObject = objectPanel.getGraphics();
        g2DObject = (Graphics2D)gObject;
        g2DObject.translate(388/2,268/2);
        g2DObject.scale(1,-1);
        gResult = resultPanel.getGraphics();
        g2DResult = (Graphics2D)gResult;
        g2DResult.translate(388/2,268/2);
        g2DResult.scale(1,-1);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        objectPanel = new javax.swing.JPanel();
        drawObjBtn = new javax.swing.JButton();
        resultPanel = new javax.swing.JPanel();
        rotateBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        rotateInput = new javax.swing.JTextField();
        translateBtn = new javax.swing.JButton();
        txLbl = new javax.swing.JLabel();
        txInput = new javax.swing.JTextField();
        tyLbl = new javax.swing.JLabel();
        tyInput = new javax.swing.JTextField();
        reflectXBtn = new javax.swing.JButton();
        reflectYBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        scaleXInp = new javax.swing.JTextField();
        scaleYInp = new javax.swing.JTextField();
        scaleBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        shearFactor = new javax.swing.JTextField();
        shearXBtn = new javax.swing.JButton();
        shearYBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout objectPanelLayout = new javax.swing.GroupLayout(objectPanel);
        objectPanel.setLayout(objectPanelLayout);
        objectPanelLayout.setHorizontalGroup(
            objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        objectPanelLayout.setVerticalGroup(
            objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );

        drawObjBtn.setText("Draw object");
        drawObjBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawObjBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 268, Short.MAX_VALUE)
        );

        rotateBtn.setText("Rotate");
        rotateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        translateBtn.setText("Translate");
        translateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateBtnActionPerformed(evt);
            }
        });

        txLbl.setText("tx");

        tyLbl.setText("ty");

        reflectXBtn.setText("Reflect about X");
        reflectXBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflectXBtnActionPerformed(evt);
            }
        });

        reflectYBtn.setText("Reflect about Y");
        reflectYBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflectYBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Scale X");

        jLabel2.setText("Scale Y");

        scaleBtn.setText("Scale");
        scaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Shear Factor");

        shearXBtn.setText("Shear X");
        shearXBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shearXBtnActionPerformed(evt);
            }
        });

        shearYBtn.setText("Shear Y");
        shearYBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shearYBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(objectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(drawObjBtn)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rotateInput)
                            .addComponent(rotateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(33, 33, 33)
                        .addComponent(txLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(translateBtn)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txInput, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tyLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reflectXBtn)
                                    .addComponent(reflectYBtn))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(scaleYInp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(shearXBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(shearYBtn))
                                    .addComponent(scaleBtn)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(scaleXInp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(shearFactor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(105, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(clearBtn)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawObjBtn)
                    .addComponent(rotateBtn)
                    .addComponent(translateBtn)
                    .addComponent(reflectXBtn)
                    .addComponent(jLabel1)
                    .addComponent(scaleXInp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(shearFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txLbl)
                    .addComponent(txInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tyLbl)
                    .addComponent(tyInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reflectYBtn)
                    .addComponent(jLabel2)
                    .addComponent(scaleYInp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shearXBtn)
                    .addComponent(shearYBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scaleBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(objectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void drawObjBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawObjBtnActionPerformed
        // TODO add your handling code here:
       drawShape();
    }//GEN-LAST:event_drawObjBtnActionPerformed

    private void drawShape()
    {
        Point2D p;
        p = new Point2D.Double(-40,-40);
        outerRect.add(p);
        p = new Point2D.Double(80,-40);
        outerRect.add(p);
         p = new Point2D.Double(80,80);
        outerRect.add(p);
        p = new Point2D.Double(-40,80);
        outerRect.add(p);
        
        for(int i=0;i<outerRect.size()  ;i++)
        {
            g2DObject.drawLine((int)outerRect.get(i%4).getX(),(int)outerRect.get(i%4).getY(),(int)outerRect.get((1+i)%4).getX(),(int)outerRect.get((1+i)%4).getY());
        }
        
        p = new Point2D.Double(-20,-45);
        innerRect1.add(p);
        p = new Point2D.Double(-15,-45);
        innerRect1.add(p);
        p = new Point2D.Double(-15,105);
        innerRect1.add(p);
        p = new Point2D.Double(-20,105);
        innerRect1.add(p);
        
         for(int i=0;i<innerRect1.size()  ;i++)
        {
            g2DObject.drawLine((int)innerRect1.get(i%4).getX(),(int)innerRect1.get(i%4).getY(),(int)innerRect1.get((1+i)%4).getX(),(int)innerRect1.get((1+i)%4).getY());
        }
         
        p = new Point2D.Double(10,-45);
        innerRect2.add(p);
        p = new Point2D.Double(15,-45);
        innerRect2.add(p);
        p = new Point2D.Double(15,105);
        innerRect2.add(p);
        p = new Point2D.Double(10,105);
        innerRect2.add(p);
        
         for(int i=0;i<innerRect2.size()  ;i++)
        {
            g2DObject.drawLine((int)innerRect2.get(i%4).getX(),(int)innerRect2.get(i%4).getY(),(int)innerRect2.get((1+i)%4).getX(),(int)innerRect2.get((1+i)%4).getY());
        }
        
        p = new Point2D.Double(40,-45);
        innerRect3.add(p);
        p = new Point2D.Double(45,-45);
        innerRect3.add(p);
        p = new Point2D.Double(45,105);
        innerRect3.add(p);
        p = new Point2D.Double(40,105);
        innerRect3.add(p);
        
         for(int i=0;i<innerRect3.size()  ;i++)
        {
            g2DObject.drawLine((int)innerRect3.get(i%4).getX(),(int)innerRect3.get(i%4).getY(),(int)innerRect3.get((1+i)%4).getX(),(int)innerRect3.get((1+i)%4).getY());
        }
         
         
        p = new Point2D.Double(-25,-60);
        smallRect1.add(p);
        p = new Point2D.Double(-10,-60);
        smallRect1.add(p);
        p = new Point2D.Double(-10,-45);
        smallRect1.add(p);
        p = new Point2D.Double(-25,-45);
        smallRect1.add(p);
        
         for(int i=0;i<smallRect1.size()  ;i++)
        {
            g2DObject.drawLine((int)smallRect1.get(i%4).getX(),(int)smallRect1.get(i%4).getY(),(int)smallRect1.get((1+i)%4).getX(),(int)smallRect1.get((1+i)%4).getY());
        }
         
        p = new Point2D.Double(5,-60);
        smallRect2.add(p);
        p = new Point2D.Double(20,-60);
        smallRect2.add(p);
        p = new Point2D.Double(20,-45);
        smallRect2.add(p);
        p = new Point2D.Double(5,-45);
        smallRect2.add(p);
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            g2DObject.drawLine((int)smallRect2.get(i%4).getX(),(int)smallRect2.get(i%4).getY(),(int)smallRect2.get((1+i)%4).getX(),(int)smallRect2.get((1+i)%4).getY());
        }
         
        p = new Point2D.Double(35,-60);
        smallRect3.add(p);
        p = new Point2D.Double(50,-60);
        smallRect3.add(p);
        p = new Point2D.Double(50,-45);
        smallRect3.add(p);
        p = new Point2D.Double(35,-45);
        smallRect3.add(p);
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            g2DObject.drawLine((int)smallRect3.get(i%4).getX(),(int)smallRect3.get(i%4).getY(),(int)smallRect3.get((1+i)%4).getX(),(int)smallRect3.get((1+i)%4).getY());
        }
        objectPanel.printComponents(g2DObject);
    }
    private void rotateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateBtnActionPerformed
        // TODO add your handling code here:
        float theta = (float) (Float.parseFloat(rotateInput.getText())*3.14/180);
        float ctheta = (float) Math.cos(theta);
        float stheta = (float) Math.sin(theta);
        for(int i=0;i<outerRect.size()  ;i++)
        {
            int x = (int) outerRect.get(i).getX();
            int y = (int) outerRect.get(i).getY();
            routerRect.add(new Point2D.Double((x*ctheta)-(y*stheta),(x*stheta)+(y*ctheta)));
        }
        for(int i=0;i<routerRect.size()  ;i++)
        {
            g2DResult.drawLine((int)routerRect.get(i%4).getX(),(int)routerRect.get(i%4).getY(),(int)routerRect.get((1+i)%4).getX(),(int)routerRect.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect1.size()  ;i++)
        {
            int x = (int) innerRect1.get(i).getX();
            int y = (int) innerRect1.get(i).getY();
            rinnerRect1.add(new Point2D.Double((x*ctheta)-(y*stheta),(x*stheta)+(y*ctheta)));
        }
        for(int i=0;i<rinnerRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect1.get(i%4).getX(),(int)rinnerRect1.get(i%4).getY(),(int)rinnerRect1.get((1+i)%4).getX(),(int)rinnerRect1.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect2.size()  ;i++)
        {
            int x = (int) innerRect2.get(i).getX();
            int y = (int) innerRect2.get(i).getY();
            rinnerRect2.add(new Point2D.Double((x*ctheta)-(y*stheta),(x*stheta)+(y*ctheta)));
        }
        for(int i=0;i<rinnerRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect2.get(i%4).getX(),(int)rinnerRect2.get(i%4).getY(),(int)rinnerRect2.get((1+i)%4).getX(),(int)rinnerRect2.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect3.size()  ;i++)
        {
            int x = (int) innerRect3.get(i).getX();
            int y = (int) innerRect3.get(i).getY();
            rinnerRect3.add(new Point2D.Double((x*ctheta)-(y*stheta),(x*stheta)+(y*ctheta)));
        }
        for(int i=0;i<rinnerRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect3.get(i%4).getX(),(int)rinnerRect3.get(i%4).getY(),(int)rinnerRect3.get((1+i)%4).getX(),(int)rinnerRect3.get((1+i)%4).getY());
        }
        for(int i=0;i<smallRect1.size()  ;i++)
        {
            int x = (int) smallRect1.get(i).getX();
            int y = (int) smallRect1.get(i).getY();
            rsmallRect1.add(new Point2D.Double((x*ctheta)-(y*stheta),(x*stheta)+(y*ctheta)));
        }
        for(int i=0;i<rsmallRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect1.get(i%4).getX(),(int)rsmallRect1.get(i%4).getY(),(int)rsmallRect1.get((1+i)%4).getX(),(int)rsmallRect1.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            int x = (int) smallRect2.get(i).getX();
            int y = (int) smallRect2.get(i).getY();
            rsmallRect2.add(new Point2D.Double((x*ctheta)-(y*stheta),(x*stheta)+(y*ctheta)));
        }
        for(int i=0;i<rsmallRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect2.get(i%4).getX(),(int)rsmallRect2.get(i%4).getY(),(int)rsmallRect2.get((1+i)%4).getX(),(int)rsmallRect2.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            int x = (int) smallRect3.get(i).getX();
            int y = (int) smallRect3.get(i).getY();
            rsmallRect3.add(new Point2D.Double((x*ctheta)-(y*stheta),(x*stheta)+(y*ctheta)));
        }
        for(int i=0;i<rsmallRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect3.get(i%4).getX(),(int)rsmallRect3.get(i%4).getY(),(int)rsmallRect3.get((1+i)%4).getX(),(int)rsmallRect3.get((1+i)%4).getY());
        }
        resultPanel.printComponents(g2DResult);
    }//GEN-LAST:event_rotateBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        routerRect.clear();
        rinnerRect1.clear();
        rinnerRect2.clear();
        rinnerRect3.clear();
        rsmallRect1.clear();
        rsmallRect2.clear();
        rsmallRect3.clear();
        objectPanel.removeAll();
        objectPanel.updateUI();
        resultPanel.removeAll();
        resultPanel.updateUI();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void translateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateBtnActionPerformed
        // TODO add your handling code here:
        int tx = Integer.parseInt(txInput.getText());
        int ty = Integer.parseInt(tyInput.getText());
         for(int i=0;i<outerRect.size()  ;i++)
        {
            int x = (int) outerRect.get(i).getX();
            int y = (int) outerRect.get(i).getY();
            routerRect.add(new Point2D.Double((x + tx),(y + ty)));
        }
        for(int i=0;i<routerRect.size()  ;i++)
        {
            g2DResult.drawLine((int)routerRect.get(i%4).getX(),(int)routerRect.get(i%4).getY(),(int)routerRect.get((1+i)%4).getX(),(int)routerRect.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect1.size()  ;i++)
        {
            int x = (int) innerRect1.get(i).getX();
            int y = (int) innerRect1.get(i).getY();
            rinnerRect1.add(new Point2D.Double((x + tx),(y + ty)));
        }
        for(int i=0;i<rinnerRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect1.get(i%4).getX(),(int)rinnerRect1.get(i%4).getY(),(int)rinnerRect1.get((1+i)%4).getX(),(int)rinnerRect1.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect2.size()  ;i++)
        {
            int x = (int) innerRect2.get(i).getX();
            int y = (int) innerRect2.get(i).getY();
            rinnerRect2.add(new Point2D.Double((x + tx),(y + ty)));
        }
        for(int i=0;i<rinnerRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect2.get(i%4).getX(),(int)rinnerRect2.get(i%4).getY(),(int)rinnerRect2.get((1+i)%4).getX(),(int)rinnerRect2.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect3.size()  ;i++)
        {
            int x = (int) innerRect3.get(i).getX();
            int y = (int) innerRect3.get(i).getY();
            rinnerRect3.add(new Point2D.Double((x + tx),(y + ty)));
        }
        for(int i=0;i<rinnerRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect3.get(i%4).getX(),(int)rinnerRect3.get(i%4).getY(),(int)rinnerRect3.get((1+i)%4).getX(),(int)rinnerRect3.get((1+i)%4).getY());
        }
        for(int i=0;i<smallRect1.size()  ;i++)
        {
            int x = (int) smallRect1.get(i).getX();
            int y = (int) smallRect1.get(i).getY();
            rsmallRect1.add(new Point2D.Double((x + tx),(y + ty)));
        }
        for(int i=0;i<rsmallRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect1.get(i%4).getX(),(int)rsmallRect1.get(i%4).getY(),(int)rsmallRect1.get((1+i)%4).getX(),(int)rsmallRect1.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            int x = (int) smallRect2.get(i).getX();
            int y = (int) smallRect2.get(i).getY();
            rsmallRect2.add(new Point2D.Double((x + tx),(y + ty)));
        }
        for(int i=0;i<rsmallRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect2.get(i%4).getX(),(int)rsmallRect2.get(i%4).getY(),(int)rsmallRect2.get((1+i)%4).getX(),(int)rsmallRect2.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            int x = (int) smallRect3.get(i).getX();
            int y = (int) smallRect3.get(i).getY();
            rsmallRect3.add(new Point2D.Double((x + tx),(y + ty)));
        }
        for(int i=0;i<rsmallRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect3.get(i%4).getX(),(int)rsmallRect3.get(i%4).getY(),(int)rsmallRect3.get((1+i)%4).getX(),(int)rsmallRect3.get((1+i)%4).getY());
        }
        resultPanel.printComponents(g2DResult);
    }//GEN-LAST:event_translateBtnActionPerformed

    private void reflectXBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflectXBtnActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<outerRect.size()  ;i++)
        {
            int x = (int) outerRect.get(i).getX();
            int y = (int) outerRect.get(i).getY();
            routerRect.add(new Point2D.Double(x ,(-1 * y)));
        }
        for(int i=0;i<routerRect.size()  ;i++)
        {
            g2DResult.drawLine((int)routerRect.get(i%4).getX(),(int)routerRect.get(i%4).getY(),(int)routerRect.get((1+i)%4).getX(),(int)routerRect.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect1.size()  ;i++)
        {
            int x = (int) innerRect1.get(i).getX();
            int y = (int) innerRect1.get(i).getY();
            rinnerRect1.add(new Point2D.Double(x ,(-1 * y)));
        }
        for(int i=0;i<rinnerRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect1.get(i%4).getX(),(int)rinnerRect1.get(i%4).getY(),(int)rinnerRect1.get((1+i)%4).getX(),(int)rinnerRect1.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect2.size()  ;i++)
        {
            int x = (int) innerRect2.get(i).getX();
            int y = (int) innerRect2.get(i).getY();
            rinnerRect2.add(new Point2D.Double(x ,(-1 * y)));
        }
        for(int i=0;i<rinnerRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect2.get(i%4).getX(),(int)rinnerRect2.get(i%4).getY(),(int)rinnerRect2.get((1+i)%4).getX(),(int)rinnerRect2.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect3.size()  ;i++)
        {
            int x = (int) innerRect3.get(i).getX();
            int y = (int) innerRect3.get(i).getY();
            rinnerRect3.add(new Point2D.Double(x ,(-1 * y)));
        }
        for(int i=0;i<rinnerRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect3.get(i%4).getX(),(int)rinnerRect3.get(i%4).getY(),(int)rinnerRect3.get((1+i)%4).getX(),(int)rinnerRect3.get((1+i)%4).getY());
        }
        for(int i=0;i<smallRect1.size()  ;i++)
        {
            int x = (int) smallRect1.get(i).getX();
            int y = (int) smallRect1.get(i).getY();
            rsmallRect1.add(new Point2D.Double(x ,(-1 * y)));
        }
        for(int i=0;i<rsmallRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect1.get(i%4).getX(),(int)rsmallRect1.get(i%4).getY(),(int)rsmallRect1.get((1+i)%4).getX(),(int)rsmallRect1.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            int x = (int) smallRect2.get(i).getX();
            int y = (int) smallRect2.get(i).getY();
            rsmallRect2.add(new Point2D.Double(x ,(-1 * y)));
        }
        for(int i=0;i<rsmallRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect2.get(i%4).getX(),(int)rsmallRect2.get(i%4).getY(),(int)rsmallRect2.get((1+i)%4).getX(),(int)rsmallRect2.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            int x = (int) smallRect3.get(i).getX();
            int y = (int) smallRect3.get(i).getY();
            rsmallRect3.add(new Point2D.Double(x ,(-1 * y)));
        }
        for(int i=0;i<rsmallRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect3.get(i%4).getX(),(int)rsmallRect3.get(i%4).getY(),(int)rsmallRect3.get((1+i)%4).getX(),(int)rsmallRect3.get((1+i)%4).getY());
        }
        resultPanel.printComponents(g2DResult);
    }//GEN-LAST:event_reflectXBtnActionPerformed

    private void reflectYBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflectYBtnActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<outerRect.size()  ;i++)
        {
            int x = (int) outerRect.get(i).getX();
            int y = (int) outerRect.get(i).getY();
            routerRect.add(new Point2D.Double((-1 *x) , y));
        }
        for(int i=0;i<routerRect.size()  ;i++)
        {
            g2DResult.drawLine((int)routerRect.get(i%4).getX(),(int)routerRect.get(i%4).getY(),(int)routerRect.get((1+i)%4).getX(),(int)routerRect.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect1.size()  ;i++)
        {
            int x = (int) innerRect1.get(i).getX();
            int y = (int) innerRect1.get(i).getY();
            rinnerRect1.add(new Point2D.Double((-1 *x) , y));
        }
        for(int i=0;i<rinnerRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect1.get(i%4).getX(),(int)rinnerRect1.get(i%4).getY(),(int)rinnerRect1.get((1+i)%4).getX(),(int)rinnerRect1.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect2.size()  ;i++)
        {
            int x = (int) innerRect2.get(i).getX();
            int y = (int) innerRect2.get(i).getY();
            rinnerRect2.add(new Point2D.Double((-1 *x) , y));
        }
        for(int i=0;i<rinnerRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect2.get(i%4).getX(),(int)rinnerRect2.get(i%4).getY(),(int)rinnerRect2.get((1+i)%4).getX(),(int)rinnerRect2.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect3.size()  ;i++)
        {
            int x = (int) innerRect3.get(i).getX();
            int y = (int) innerRect3.get(i).getY();
            rinnerRect3.add(new Point2D.Double((-1 *x) , y));
        }
        for(int i=0;i<rinnerRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect3.get(i%4).getX(),(int)rinnerRect3.get(i%4).getY(),(int)rinnerRect3.get((1+i)%4).getX(),(int)rinnerRect3.get((1+i)%4).getY());
        }
        for(int i=0;i<smallRect1.size()  ;i++)
        {
            int x = (int) smallRect1.get(i).getX();
            int y = (int) smallRect1.get(i).getY();
            rsmallRect1.add(new Point2D.Double((-1 *x) , y));
        }
        for(int i=0;i<rsmallRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect1.get(i%4).getX(),(int)rsmallRect1.get(i%4).getY(),(int)rsmallRect1.get((1+i)%4).getX(),(int)rsmallRect1.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            int x = (int) smallRect2.get(i).getX();
            int y = (int) smallRect2.get(i).getY();
            rsmallRect2.add(new Point2D.Double((-1 *x) , y));
        }
        for(int i=0;i<rsmallRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect2.get(i%4).getX(),(int)rsmallRect2.get(i%4).getY(),(int)rsmallRect2.get((1+i)%4).getX(),(int)rsmallRect2.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            int x = (int) smallRect3.get(i).getX();
            int y = (int) smallRect3.get(i).getY();
            rsmallRect3.add(new Point2D.Double((-1 *x) , y));
        }
        for(int i=0;i<rsmallRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect3.get(i%4).getX(),(int)rsmallRect3.get(i%4).getY(),(int)rsmallRect3.get((1+i)%4).getX(),(int)rsmallRect3.get((1+i)%4).getY());
        }
        resultPanel.printComponents(g2DResult);
    }//GEN-LAST:event_reflectYBtnActionPerformed

    private void scaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleBtnActionPerformed
        // TODO add your handling code here:
        float sx = Float.parseFloat(scaleXInp.getText());
        float sy = Float.parseFloat(scaleYInp.getText());
        for(int i=0;i<outerRect.size()  ;i++)
        {
            int x = (int) outerRect.get(i).getX();
            int y = (int) outerRect.get(i).getY();
            routerRect.add(new Point2D.Double((x * sx),(y * sy)));
        }
        for(int i=0;i<routerRect.size()  ;i++)
        {
            g2DResult.drawLine((int)routerRect.get(i%4).getX(),(int)routerRect.get(i%4).getY(),(int)routerRect.get((1+i)%4).getX(),(int)routerRect.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect1.size()  ;i++)
        {
            int x = (int) innerRect1.get(i).getX();
            int y = (int) innerRect1.get(i).getY();
            rinnerRect1.add(new Point2D.Double((x * sx),(y * sy)));
        }
        for(int i=0;i<rinnerRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect1.get(i%4).getX(),(int)rinnerRect1.get(i%4).getY(),(int)rinnerRect1.get((1+i)%4).getX(),(int)rinnerRect1.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect2.size()  ;i++)
        {
            int x = (int) innerRect2.get(i).getX();
            int y = (int) innerRect2.get(i).getY();
            rinnerRect2.add(new Point2D.Double((x * sx),(y * sy)));
        }
        for(int i=0;i<rinnerRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect2.get(i%4).getX(),(int)rinnerRect2.get(i%4).getY(),(int)rinnerRect2.get((1+i)%4).getX(),(int)rinnerRect2.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect3.size()  ;i++)
        {
            int x = (int) innerRect3.get(i).getX();
            int y = (int) innerRect3.get(i).getY();
            rinnerRect3.add(new Point2D.Double((x * sx),(y * sy)));
        }
        for(int i=0;i<rinnerRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect3.get(i%4).getX(),(int)rinnerRect3.get(i%4).getY(),(int)rinnerRect3.get((1+i)%4).getX(),(int)rinnerRect3.get((1+i)%4).getY());
        }
        for(int i=0;i<smallRect1.size()  ;i++)
        {
            int x = (int) smallRect1.get(i).getX();
            int y = (int) smallRect1.get(i).getY();
            rsmallRect1.add(new Point2D.Double((x * sx),(y * sy)));
        }
        for(int i=0;i<rsmallRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect1.get(i%4).getX(),(int)rsmallRect1.get(i%4).getY(),(int)rsmallRect1.get((1+i)%4).getX(),(int)rsmallRect1.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            int x = (int) smallRect2.get(i).getX();
            int y = (int) smallRect2.get(i).getY();
            rsmallRect2.add(new Point2D.Double((x * sx),(y * sy)));
        }
        for(int i=0;i<rsmallRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect2.get(i%4).getX(),(int)rsmallRect2.get(i%4).getY(),(int)rsmallRect2.get((1+i)%4).getX(),(int)rsmallRect2.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            int x = (int) smallRect3.get(i).getX();
            int y = (int) smallRect3.get(i).getY();
            rsmallRect3.add(new Point2D.Double((x * sx),(y * sy)));
        }
        for(int i=0;i<rsmallRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect3.get(i%4).getX(),(int)rsmallRect3.get(i%4).getY(),(int)rsmallRect3.get((1+i)%4).getX(),(int)rsmallRect3.get((1+i)%4).getY());
        }
        resultPanel.printComponents(g2DResult);
    }//GEN-LAST:event_scaleBtnActionPerformed

    private void shearXBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shearXBtnActionPerformed
        // TODO add your handling code here:
        float sf = Float.parseFloat(shearFactor.getText());
        
        for(int i=0;i<outerRect.size()  ;i++)
        {
            int x = (int) outerRect.get(i).getX();
            int y = (int) outerRect.get(i).getY();
            routerRect.add(new Point2D.Double((x + (y* sf)),y));
        }
        for(int i=0;i<routerRect.size()  ;i++)
        {
            g2DResult.drawLine((int)routerRect.get(i%4).getX(),(int)routerRect.get(i%4).getY(),(int)routerRect.get((1+i)%4).getX(),(int)routerRect.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect1.size()  ;i++)
        {
            int x = (int) innerRect1.get(i).getX();
            int y = (int) innerRect1.get(i).getY();
            rinnerRect1.add(new Point2D.Double((x + (y* sf)),y));
        }
        for(int i=0;i<rinnerRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect1.get(i%4).getX(),(int)rinnerRect1.get(i%4).getY(),(int)rinnerRect1.get((1+i)%4).getX(),(int)rinnerRect1.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect2.size()  ;i++)
        {
            int x = (int) innerRect2.get(i).getX();
            int y = (int) innerRect2.get(i).getY();
            rinnerRect2.add(new Point2D.Double((x + (y* sf)),y));
        }
        for(int i=0;i<rinnerRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect2.get(i%4).getX(),(int)rinnerRect2.get(i%4).getY(),(int)rinnerRect2.get((1+i)%4).getX(),(int)rinnerRect2.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect3.size()  ;i++)
        {
            int x = (int) innerRect3.get(i).getX();
            int y = (int) innerRect3.get(i).getY();
            rinnerRect3.add(new Point2D.Double((x + (y* sf)),y));
        }
        for(int i=0;i<rinnerRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect3.get(i%4).getX(),(int)rinnerRect3.get(i%4).getY(),(int)rinnerRect3.get((1+i)%4).getX(),(int)rinnerRect3.get((1+i)%4).getY());
        }
        for(int i=0;i<smallRect1.size()  ;i++)
        {
            int x = (int) smallRect1.get(i).getX();
            int y = (int) smallRect1.get(i).getY();
            rsmallRect1.add(new Point2D.Double((x + (y* sf)),y));
        }
        for(int i=0;i<rsmallRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect1.get(i%4).getX(),(int)rsmallRect1.get(i%4).getY(),(int)rsmallRect1.get((1+i)%4).getX(),(int)rsmallRect1.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            int x = (int) smallRect2.get(i).getX();
            int y = (int) smallRect2.get(i).getY();
            rsmallRect2.add(new Point2D.Double((x + (y* sf)),y));
        }
        for(int i=0;i<rsmallRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect2.get(i%4).getX(),(int)rsmallRect2.get(i%4).getY(),(int)rsmallRect2.get((1+i)%4).getX(),(int)rsmallRect2.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            int x = (int) smallRect3.get(i).getX();
            int y = (int) smallRect3.get(i).getY();
            rsmallRect3.add(new Point2D.Double((x + (y* sf)),y));
        }
        for(int i=0;i<rsmallRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect3.get(i%4).getX(),(int)rsmallRect3.get(i%4).getY(),(int)rsmallRect3.get((1+i)%4).getX(),(int)rsmallRect3.get((1+i)%4).getY());
        }
        resultPanel.printComponents(g2DResult);
    }//GEN-LAST:event_shearXBtnActionPerformed

    private void shearYBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shearYBtnActionPerformed
        // TODO add your handling code here:
        float sf = Float.parseFloat(shearFactor.getText());
        
        for(int i=0;i<outerRect.size()  ;i++)
        {
            int x = (int) outerRect.get(i).getX();
            int y = (int) outerRect.get(i).getY();
            routerRect.add(new Point2D.Double(x ,(y+ (x* sf))));
        }
        for(int i=0;i<routerRect.size()  ;i++)
        {
            g2DResult.drawLine((int)routerRect.get(i%4).getX(),(int)routerRect.get(i%4).getY(),(int)routerRect.get((1+i)%4).getX(),(int)routerRect.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect1.size()  ;i++)
        {
            int x = (int) innerRect1.get(i).getX();
            int y = (int) innerRect1.get(i).getY();
            rinnerRect1.add(new Point2D.Double(x ,(y+ (x* sf))));
        }
        for(int i=0;i<rinnerRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect1.get(i%4).getX(),(int)rinnerRect1.get(i%4).getY(),(int)rinnerRect1.get((1+i)%4).getX(),(int)rinnerRect1.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect2.size()  ;i++)
        {
            int x = (int) innerRect2.get(i).getX();
            int y = (int) innerRect2.get(i).getY();
            rinnerRect2.add(new Point2D.Double(x ,(y+ (x* sf))));
        }
        for(int i=0;i<rinnerRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect2.get(i%4).getX(),(int)rinnerRect2.get(i%4).getY(),(int)rinnerRect2.get((1+i)%4).getX(),(int)rinnerRect2.get((1+i)%4).getY());
        }
        
        for(int i=0;i<innerRect3.size()  ;i++)
        {
            int x = (int) innerRect3.get(i).getX();
            int y = (int) innerRect3.get(i).getY();
            rinnerRect3.add(new Point2D.Double(x ,(y+ (x* sf))));
        }
        for(int i=0;i<rinnerRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rinnerRect3.get(i%4).getX(),(int)rinnerRect3.get(i%4).getY(),(int)rinnerRect3.get((1+i)%4).getX(),(int)rinnerRect3.get((1+i)%4).getY());
        }
        for(int i=0;i<smallRect1.size()  ;i++)
        {
            int x = (int) smallRect1.get(i).getX();
            int y = (int) smallRect1.get(i).getY();
            rsmallRect1.add(new Point2D.Double(x ,(y+ (x* sf))));
        }
        for(int i=0;i<rsmallRect1.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect1.get(i%4).getX(),(int)rsmallRect1.get(i%4).getY(),(int)rsmallRect1.get((1+i)%4).getX(),(int)rsmallRect1.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect2.size()  ;i++)
        {
            int x = (int) smallRect2.get(i).getX();
            int y = (int) smallRect2.get(i).getY();
            rsmallRect2.add(new Point2D.Double(x ,(y+ (x* sf))));
        }
        for(int i=0;i<rsmallRect2.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect2.get(i%4).getX(),(int)rsmallRect2.get(i%4).getY(),(int)rsmallRect2.get((1+i)%4).getX(),(int)rsmallRect2.get((1+i)%4).getY());
        }
        
         for(int i=0;i<smallRect3.size()  ;i++)
        {
            int x = (int) smallRect3.get(i).getX();
            int y = (int) smallRect3.get(i).getY();
            rsmallRect3.add(new Point2D.Double(x ,(y+ (x* sf))));
        }
        for(int i=0;i<rsmallRect3.size()  ;i++)
        {
            g2DResult.drawLine((int)rsmallRect3.get(i%4).getX(),(int)rsmallRect3.get(i%4).getY(),(int)rsmallRect3.get((1+i)%4).getX(),(int)rsmallRect3.get((1+i)%4).getY());
        }
        resultPanel.printComponents(g2DResult);
    }//GEN-LAST:event_shearYBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Two_dimensional_transformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Two_dimensional_transformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Two_dimensional_transformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Two_dimensional_transformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Two_dimensional_transformation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton drawObjBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel objectPanel;
    private javax.swing.JButton reflectXBtn;
    private javax.swing.JButton reflectYBtn;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton rotateBtn;
    private javax.swing.JTextField rotateInput;
    private javax.swing.JButton scaleBtn;
    private javax.swing.JTextField scaleXInp;
    private javax.swing.JTextField scaleYInp;
    private javax.swing.JTextField shearFactor;
    private javax.swing.JButton shearXBtn;
    private javax.swing.JButton shearYBtn;
    private javax.swing.JButton translateBtn;
    private javax.swing.JTextField txInput;
    private javax.swing.JLabel txLbl;
    private javax.swing.JTextField tyInput;
    private javax.swing.JLabel tyLbl;
    // End of variables declaration//GEN-END:variables
}
